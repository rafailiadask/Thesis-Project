package com.example.productspurchaseapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.example.productspurchaseapp.Model.Cart;
import com.example.productspurchaseapp.ViewHolder.CartViewHolder;
import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.firebase.ui.database.FirebaseRecyclerOptions;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

public class CartActivity extends AppCompatActivity {

   private RecyclerView recyclerView;
   private RecyclerView.LayoutManager layoutManager;
   private Button NextBtn;
   private TextView txtTotalAmount;


    private DatabaseReference cartRef;
    private String userId="rafailia";
    private int totalPrice=0;
    private FirebaseRecyclerAdapter<Cart, CartViewHolder> adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cart);

        recyclerView=findViewById(R.id.cart_list);
        recyclerView.setHasFixedSize(true);
        layoutManager=new LinearLayoutManager(this);
        recyclerView.setLayoutManager(layoutManager);

        NextBtn=(Button)findViewById(R.id.next_btn);
        txtTotalAmount=(TextView)findViewById(R.id.total_price);



      /*  String userId="rafailia";
        cartRef= FirebaseDatabase.getInstance().getReference().child("Cart").child(userId);

        cartRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                cartItemList.clear();
                for(DataSnapshot itemSnapshot: snapshot.getChildren()){
                    CartItem cartItem=itemSnapshot.getValue(CartItem.class);
                    if(cartItem!=null){
                        cartItemList.add(cartItem);
                    }
                }
                cartAdapter.notifyDataSetChanged();

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });*/
        NextBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent=new Intent(CartActivity.this,OrderActivity.class);
                startActivity(intent);
            }
        });
    }

    @Override
    protected void onStart() {
        super.onStart();
        final DatabaseReference cartRef = FirebaseDatabase.getInstance().getReference("Cart").child(userId);

        FirebaseRecyclerOptions<Cart> options = new FirebaseRecyclerOptions.Builder<Cart>().setQuery(cartRef, Cart.class).build();
        adapter = new FirebaseRecyclerAdapter<Cart, CartViewHolder>(options) {
            @Override
            protected void onBindViewHolder(@NonNull CartViewHolder holder, int position, @NonNull Cart model)
            {
                Log.d("CartActivity", "Cart Item: " + model.getPname() + ", " + model.getPrice() + ", " + model.getQuantity());

                int productTotalPrice=model.getPrice() * model.getQuantity();
                holder.txtProductQuantity.setText("quantity=" + model.getQuantity());
                holder.txtProductPrice.setText("price= " + model.getPrice() + "€");
                holder.txtProductName.setText(model.getPname());
                holder.txtProductDescription.setText(model.getDescription());

                totalPrice+=productTotalPrice;
                txtTotalAmount.setText("Total Price= " + totalPrice + "€");

                holder.itemView.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        CharSequence options[] = new CharSequence[]{
                                "Edit",
                                "Remove"
                        };
                        AlertDialog.Builder builder = new AlertDialog.Builder(CartActivity.this);
                        builder.setTitle("Cart Options:");
                        builder.setItems(options, new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                if (i == 0) {
                                    Intent intent = new Intent(CartActivity.this, ProductDetailsActivity.class);
                                    intent.putExtra("name", model.getPname());
                                    startActivity(intent);
                                }
                                if (i == 1) {
                                    String itemKey=getRef(position).getKey();
                                    cartRef.child(getRef(position).getKey())
                                            .removeValue()
                                            .addOnCompleteListener(new OnCompleteListener<Void>() {
                                                @Override
                                                public void onComplete(@NonNull Task<Void> task) {
                                                    if (task.isSuccessful()) {
                                                        Toast.makeText(CartActivity.this, "item removed", Toast.LENGTH_SHORT).show();
                                                        adapter.notifyItemRemoved(position);
                                                        if(adapter.getItemCount()==0){
                                                            Intent intent=new Intent(CartActivity.this,HomeActivity.class);
                                                            startActivity(intent);
                                                        }
                                                    }

                                                }

                                            }).addOnFailureListener(new OnFailureListener() {
                                                @Override
                                                public void onFailure(@NonNull Exception e) {
                                                    Toast.makeText(CartActivity.this, "Σφάλμα: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                                                    Log.e("CartActivity", "Σφάλμα αφαίρεσης αντικειμένου", e);
                                                }
                                            });

                                }

                            }
                        });
                        builder.show();
                    }
                });


            }


            @NonNull
            @Override
            public CartViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.cart_items_layout, parent, false);
                CartViewHolder holder = new CartViewHolder(view);
                return holder;
            }
        };
        RecyclerView recyclerView=findViewById(R.id.cart_list);
        recyclerView.setAdapter(adapter);
        adapter.startListening();

    }


}
