package com.example.productspurchaseapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.HashMap;

public class OrderActivity extends AppCompatActivity {
    private EditText FirstName,LastName,Phone,Address;
    private RadioGroup Payment;
    private RadioButton CashOnDelivery, Card;
    private Button btnOk;
    private DatabaseReference ordersRef;
    private DatabaseReference cartRef;

    private String userId="refailia";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_order);

        FirstName=findViewById(R.id.first_name);
        LastName=findViewById(R.id.last_name);
        Phone=findViewById(R.id.phone);
        Address=findViewById(R.id.address);
        Payment=findViewById(R.id.payment);
        CashOnDelivery=findViewById(R.id.cash_on_delivery);
        Card=findViewById(R.id.card);
        btnOk=findViewById(R.id.btn_ok);

        ordersRef= FirebaseDatabase.getInstance().getReference().child("Orders");
        cartRef=FirebaseDatabase.getInstance().getReference().child("Cart").child(userId);


        btnOk.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String firstName=FirstName.getText().toString().trim();
                String lastName=LastName.getText().toString().trim();
                String phone=Phone.getText().toString().trim();
                String address=Address.getText().toString().trim();
                int selectedPaymentId=Payment.getCheckedRadioButtonId();
                String paymentMethod=selectedPaymentId==R.id.cash_on_delivery?"Cash On Delivery":"Card";

                showSuccessDialog();

                storeOrderDetails(firstName,lastName,phone,address,paymentMethod);
            }
        });

    }
    private void storeOrderDetails(final String firstName,final String lastName,final String phone,final String address, final String paymentMethod){
        cartRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                if(snapshot.exists()){
                    String orderId=ordersRef.push().getKey();
                    HashMap<String, Object> orderMap = new HashMap<>();
                    orderMap.put("firstName",firstName);
                    orderMap.put("lastName",lastName);
                    orderMap.put("phone",phone);
                    orderMap.put("address",address);
                    orderMap.put("paymentMethod",paymentMethod);

                    HashMap<String, Object> itemsMap=new HashMap<>();
                    for(DataSnapshot itemSnapshot:snapshot.getChildren()){
                        itemsMap.put(itemSnapshot.getKey(),itemSnapshot.getValue());
                    }
                    orderMap.put("items",itemsMap);

                    ordersRef.child(orderId).setValue(orderMap).addOnCompleteListener(new OnCompleteListener<Void>() {
                        @Override
                        public void onComplete(@NonNull Task<Void> task) {
                            if(task.isSuccessful()){
                                cartRef.removeValue();
                                showSuccessDialog();
                            }else{
                                Toast.makeText(OrderActivity.this,"Failed",Toast.LENGTH_SHORT).show();
                            }

                        }
                    });

                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Toast.makeText(OrderActivity.this,"failed",Toast.LENGTH_SHORT).show();

            }
        });

    }
    private void showSuccessDialog(){
        AlertDialog.Builder builder=new AlertDialog.Builder(OrderActivity.this);
        builder.setTitle("Eπιτυχία Παραγγελίας");
        builder.setMessage("Η παραγγελία καταχωρήθηκε επιτυχώς θα είναι έτοιμη σε μία εβδομάδα");
        builder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
            @Override
                    public void onClick(DialogInterface dialog, int which){
                Intent intent=new Intent(OrderActivity.this,HomeActivity.class);
                startActivity(intent);
                finish();

            }
        });
        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int which) {

                Intent intent=new Intent(OrderActivity.this,HomeActivity.class);
                startActivity(intent);
                finish();

            }
        });
         builder.setCancelable(false);
         builder.show();
    }
}
